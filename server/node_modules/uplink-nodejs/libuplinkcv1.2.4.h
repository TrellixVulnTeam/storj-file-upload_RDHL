/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package storj.io/uplink-c */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 6 "access.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "bucket.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "buckets.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "config.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "download.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "encryption.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "error.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "main.go"

 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "object.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "objects.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "project.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "upload.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// uplink_parse_access parses serialized access grant string.
extern UplinkAccessResult uplink_parse_access(uplink_const_char* accessString);

// uplink_request_access_with_passphrase requests satellite for a new access grant using a passhprase.
extern UplinkAccessResult uplink_request_access_with_passphrase(uplink_const_char* satellite_address, uplink_const_char* api_key, uplink_const_char* passphrase);

// uplink_access_satellite_address returns the satellite node URL for this access grant.
extern UplinkStringResult uplink_access_satellite_address(UplinkAccess* access);

// uplink_access_serialize serializes access grant into a string.
extern UplinkStringResult uplink_access_serialize(UplinkAccess* access);

// uplink_access_share creates new access grant with specific permission. Permission will be applied to prefixes when defined.
extern UplinkAccessResult uplink_access_share(UplinkAccess* access, UplinkPermission permission, UplinkSharePrefix* prefixes, GoInt prefixes_count);

// uplink_access_override_encryption_key overrides the root encryption key for the prefix in
// bucket with encryptionKey.
//
// This function is useful for overriding the encryption key in user-specific
// access grants when implementing multitenancy in a single app bucket.
extern UplinkError* uplink_access_override_encryption_key(UplinkAccess* access, uplink_const_char* bucket, uplink_const_char* prefix, UplinkEncryptionKey* encryptionKey);

// uplink_free_string_result frees the resources associated with string result.
extern void uplink_free_string_result(UplinkStringResult result);

// uplink_free_access_result frees the resources associated with access grant.
extern void uplink_free_access_result(UplinkAccessResult result);

// uplink_stat_bucket returns information about a bucket.
extern UplinkBucketResult uplink_stat_bucket(UplinkProject* project, uplink_const_char* bucket_name);

// uplink_create_bucket creates a new bucket.
//
// When bucket already exists it returns a valid Bucket and ErrBucketExists.
extern UplinkBucketResult uplink_create_bucket(UplinkProject* project, uplink_const_char* bucket_name);

// uplink_ensure_bucket creates a new bucket and ignores the error when it already exists.
//
// When bucket already exists it returns a valid Bucket and ErrBucketExists.
extern UplinkBucketResult uplink_ensure_bucket(UplinkProject* project, uplink_const_char* bucket_name);

// uplink_delete_bucket deletes a bucket.
//
// When bucket is not empty it returns ErrBucketNotEmpty.
extern UplinkBucketResult uplink_delete_bucket(UplinkProject* project, uplink_const_char* bucket_name);

// uplink_delete_bucket_with_objects deletes a bucket and all objects within that bucket.
//
// When there are concurrent writes to the bucket it returns ErrBucketNotEmpty.
extern UplinkBucketResult uplink_delete_bucket_with_objects(UplinkProject* project, uplink_const_char* bucket_name);

// uplink_free_bucket_result frees memory associated with the BucketResult.
extern void uplink_free_bucket_result(UplinkBucketResult result);

// uplink_free_bucket frees memory associated with the bucket.
extern void uplink_free_bucket(UplinkBucket* bucket);

// uplink_list_buckets lists buckets.
extern UplinkBucketIterator* uplink_list_buckets(UplinkProject* project, UplinkListBucketsOptions* options);

// uplink_bucket_iterator_next prepares next Bucket for reading.
//
// It returns false if the end of the iteration is reached and there are no more buckets, or if there is an error.
extern _Bool uplink_bucket_iterator_next(UplinkBucketIterator* iterator);

// uplink_bucket_iterator_err returns error, if one happened during iteration.
extern UplinkError* uplink_bucket_iterator_err(UplinkBucketIterator* iterator);

// uplink_bucket_iterator_item returns the current bucket in the iterator.
extern UplinkBucket* uplink_bucket_iterator_item(UplinkBucketIterator* iterator);

// uplink_free_bucket_iterator frees memory associated with the BucketIterator.
extern void uplink_free_bucket_iterator(UplinkBucketIterator* iterator);

// uplink_config_request_access_with_passphrase requests satellite for a new access grant using a passhprase.
extern UplinkAccessResult uplink_config_request_access_with_passphrase(UplinkConfig config, uplink_const_char* satellite_address, uplink_const_char* api_key, uplink_const_char* passphrase);

// uplink_config_open_project opens project using access grant.
extern UplinkProjectResult uplink_config_open_project(UplinkConfig config, UplinkAccess* access);

// uplink_download_object starts  download to the specified key.
extern UplinkDownloadResult uplink_download_object(UplinkProject* project, uplink_const_char* bucket_name, uplink_const_char* object_key, UplinkDownloadOptions* options);

// uplink_download_read downloads from object's data stream into bytes up to length amount.
// It returns the number of bytes read (0 <= bytes_read <= length) and
// any error encountered that caused the read to stop early.
extern UplinkReadResult uplink_download_read(UplinkDownload* download, void* bytes, size_t length);

// uplink_download_info returns information about the downloaded object.
extern UplinkObjectResult uplink_download_info(UplinkDownload* download);

// uplink_free_read_result frees any resources associated with read result.
extern void uplink_free_read_result(UplinkReadResult result);

// uplink_close_download closes the download.
extern UplinkError* uplink_close_download(UplinkDownload* download);

// uplink_free_download_result frees any associated resources.
extern void uplink_free_download_result(UplinkDownloadResult result);

// uplink_derive_encryption_key derives a salted encryption key for passphrase using the
// salt.
//
// This function is useful for deriving a salted encryption key for users when
// implementing multitenancy in a single app bucket.
extern UplinkEncryptionKeyResult uplink_derive_encryption_key(uplink_const_char* passphrase, void* salt, size_t length);

// uplink_free_encryption_key_result frees the resources associated with encryption key.
extern void uplink_free_encryption_key_result(UplinkEncryptionKeyResult result);

// uplink_free_error frees error data.
extern void uplink_free_error(UplinkError* err);

// uplink_internal_UniverseIsEmpty returns true if nothing is stored in the global map.
extern GoUint8 uplink_internal_UniverseIsEmpty();

// uplink_stat_object returns information about an object at the specific key.
extern UplinkObjectResult uplink_stat_object(UplinkProject* project, uplink_const_char* bucket_name, uplink_const_char* object_key);

// uplink_delete_object deletes an object.
extern UplinkObjectResult uplink_delete_object(UplinkProject* project, uplink_const_char* bucket_name, uplink_const_char* object_key);

// uplink_free_object_result frees memory associated with the ObjectResult.
extern void uplink_free_object_result(UplinkObjectResult obj);

// uplink_free_object frees memory associated with the Object.
extern void uplink_free_object(UplinkObject* obj);

// uplink_list_objects lists objects.
extern UplinkObjectIterator* uplink_list_objects(UplinkProject* project, uplink_const_char* bucket_name, UplinkListObjectsOptions* options);

// uplink_object_iterator_next prepares next Object for reading.
//
// It returns false if the end of the iteration is reached and there are no more objects, or if there is an error.
extern _Bool uplink_object_iterator_next(UplinkObjectIterator* iterator);

// uplink_object_iterator_err returns error, if one happened during iteration.
extern UplinkError* uplink_object_iterator_err(UplinkObjectIterator* iterator);

// uplink_object_iterator_item returns the current object in the iterator.
extern UplinkObject* uplink_object_iterator_item(UplinkObjectIterator* iterator);

// uplink_free_object_iterator frees memory associated with the ObjectIterator.
extern void uplink_free_object_iterator(UplinkObjectIterator* iterator);

// uplink_open_project opens project using access grant.
extern UplinkProjectResult uplink_open_project(UplinkAccess* access);

// uplink_close_project closes the project.
extern UplinkError* uplink_close_project(UplinkProject* project);

// uplink_free_project_result frees any associated resources.
extern void uplink_free_project_result(UplinkProjectResult result);

// uplink_upload_object starts an upload to the specified key.
extern UplinkUploadResult uplink_upload_object(UplinkProject* project, uplink_const_char* bucket_name, uplink_const_char* object_key, UplinkUploadOptions* options);

// uplink_upload_write uploads len(p) bytes from p to the object's data stream.
// It returns the number of bytes written from p (0 <= n <= len(p)) and
// any error encountered that caused the write to stop early.
extern UplinkWriteResult uplink_upload_write(UplinkUpload* upload, void* bytes, size_t length);

// uplink_upload_commit commits the uploaded data.
extern UplinkError* uplink_upload_commit(UplinkUpload* upload);

// uplink_upload_abort aborts an upload.
extern UplinkError* uplink_upload_abort(UplinkUpload* upload);

// uplink_upload_info returns the last information about the uploaded object.
extern UplinkObjectResult uplink_upload_info(UplinkUpload* upload);

// uplink_upload_set_custom_metadata returns the last information about the uploaded object.
extern UplinkError* uplink_upload_set_custom_metadata(UplinkUpload* upload, UplinkCustomMetadata custom);

// uplink_free_write_result frees any resources associated with write result.
extern void uplink_free_write_result(UplinkWriteResult result);

// uplink_free_upload_result closes the upload and frees any associated resources.
extern void uplink_free_upload_result(UplinkUploadResult result);

#ifdef __cplusplus
}
#endif
